import { 
  Conversation, 
  Template, 
  Scenario, 
  EdgeCase,
  ConversationTurn,
  QualityMetrics,
  ReviewAction
} from './types';

// Helper to generate random date within range
function randomDate(start: Date, end: Date): string {
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).toISOString();
}

// Generate conversation turns
function generateTurns(count: number): ConversationTurn[] {
  const turns: ConversationTurn[] = [];
  const topics = [
    { user: "How do I implement authentication?", assistant: "To implement authentication, you'll want to start by choosing an authentication strategy. The most common approaches are session-based authentication using cookies, or token-based authentication using JWT (JSON Web Tokens). For modern applications, JWT is often preferred because it's stateless and works well with SPAs and mobile apps." },
    { user: "What's the difference between SQL and NoSQL?", assistant: "SQL and NoSQL databases serve different purposes. SQL databases like PostgreSQL are relational, use structured schemas, and are great for complex queries and transactions. NoSQL databases like MongoDB are document-based, schema-flexible, and excel at horizontal scaling and handling unstructured data." },
    { user: "Can you explain React hooks?", assistant: "React hooks are functions that let you use state and other React features in functional components. The most common hooks are useState for managing component state, useEffect for side effects like API calls, and useContext for accessing context. Hooks must be called at the top level of your component." },
    { user: "How do I optimize database queries?", assistant: "Database query optimization involves several techniques: add proper indexes on frequently queried columns, avoid SELECT *, use EXPLAIN to analyze query plans, implement pagination for large result sets, and consider caching frequently accessed data. Also, normalize your schema appropriately." },
    { user: "What are microservices?", assistant: "Microservices are an architectural pattern where applications are structured as a collection of loosely coupled services. Each service focuses on a specific business capability, can be developed and deployed independently, and communicates with others via APIs. This contrasts with monolithic architecture where everything runs as a single unit." },
  ];
  
  for (let i = 0; i < count; i++) {
    const topic = topics[i % topics.length];
    turns.push({
      role: 'user',
      content: topic.user,
      timestamp: new Date(Date.now() - (count - i) * 60000).toISOString(),
      tokenCount: Math.floor(topic.user.length / 4),
    });
    turns.push({
      role: 'assistant',
      content: topic.assistant,
      timestamp: new Date(Date.now() - (count - i) * 60000 + 30000).toISOString(),
      tokenCount: Math.floor(topic.assistant.length / 4),
    });
  }
  
  return turns;
}

// Generate quality metrics
function generateQualityMetrics(baseScore: number): QualityMetrics {
  const variance = 0.5;
  return {
    overall: baseScore,
    relevance: Math.min(10, Math.max(0, baseScore + (Math.random() - 0.5) * variance)),
    accuracy: Math.min(10, Math.max(0, baseScore + (Math.random() - 0.5) * variance)),
    naturalness: Math.min(10, Math.max(0, baseScore + (Math.random() - 0.5) * variance)),
    methodology: Math.min(10, Math.max(0, baseScore + (Math.random() - 0.5) * variance)),
    coherence: Math.min(10, Math.max(0, baseScore + (Math.random() - 0.5) * variance)),
    confidence: baseScore > 7.5 ? 'high' : baseScore > 5 ? 'medium' : 'low',
    uniqueness: Math.min(10, Math.max(0, baseScore + (Math.random() - 0.5) * variance)),
    trainingValue: baseScore > 7.5 ? 'high' : baseScore > 5 ? 'medium' : 'low',
  };
}

// Generate mock templates
export function generateMockTemplates(): Template[] {
  const templates: Template[] = [
    {
      id: 'template-1',
      name: 'Customer Support Best Practices',
      description: 'Template for training conversations about effective customer support strategies and techniques',
      category: 'Customer Service',
      structure: 'User: I need help with {{issue_type}}.\nAssistant: I understand you\'re experiencing {{issue_type}}. Let me help you resolve this by {{resolution_approach}}.',
      variables: [
        { name: 'issue_type', type: 'text', defaultValue: 'account access', helpText: 'The type of issue the customer is facing' },
        { name: 'resolution_approach', type: 'text', defaultValue: 'walking you through the steps', helpText: 'How to approach resolution' },
      ],
      tone: 'Professional',
      complexityBaseline: 5,
      styleNotes: 'Empathetic, clear, solution-oriented',
      qualityThreshold: 7.0,
      requiredElements: ['Acknowledgment', 'Solution steps', 'Follow-up offer'],
      usageCount: 23,
      rating: 4.5,
      lastModified: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Sarah Johnson',
    },
    {
      id: 'template-2',
      name: 'Technical Troubleshooting',
      description: 'Structured template for diagnosing and resolving technical issues',
      category: 'Technical Support',
      structure: 'User: {{symptom_description}}\nAssistant: To diagnose this issue, let\'s check {{diagnostic_step}}. {{follow_up_question}}',
      variables: [
        { name: 'symptom_description', type: 'text', defaultValue: 'The application crashes when I click save', helpText: 'User description of the problem' },
        { name: 'diagnostic_step', type: 'text', defaultValue: 'your browser console for errors', helpText: 'First diagnostic step' },
        { name: 'follow_up_question', type: 'text', defaultValue: 'Can you tell me what browser version you\'re using?', helpText: 'Question to gather more info' },
      ],
      tone: 'Technical',
      complexityBaseline: 7,
      styleNotes: 'Methodical, precise, educational',
      qualityThreshold: 7.5,
      requiredElements: ['Problem clarification', 'Step-by-step diagnosis', 'Root cause explanation'],
      usageCount: 45,
      rating: 4.8,
      lastModified: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Michael Chen',
    },
    {
      id: 'template-3',
      name: 'Sales Objection Handling',
      description: 'Template for addressing customer objections during sales conversations',
      category: 'Sales & Marketing',
      structure: 'User: I\'m concerned about {{objection_type}}.\nAssistant: I understand your concern about {{objection_type}}. Let me address that by {{resolution_approach}}.',
      variables: [
        { name: 'objection_type', type: 'text', defaultValue: 'pricing', helpText: 'The objection the customer has' },
        { name: 'resolution_approach', type: 'text', defaultValue: 'explaining our value proposition', helpText: 'How to overcome the objection' },
      ],
      tone: 'Professional',
      complexityBaseline: 6,
      styleNotes: 'Consultative, value-focused, not pushy',
      qualityThreshold: 7.0,
      requiredElements: ['Acknowledge concern', 'Provide value proposition', 'Offer proof points'],
      usageCount: 34,
      rating: 4.3,
      lastModified: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Jessica Williams',
    },
    {
      id: 'template-4',
      name: 'Product Feature Explanation',
      description: 'Template for explaining product features and benefits to users',
      category: 'Product Education',
      structure: 'User: What does {{feature_name}} do?\nAssistant: {{feature_name}} allows you to {{primary_benefit}}. This is particularly useful when {{use_case}}.',
      variables: [
        { name: 'feature_name', type: 'text', defaultValue: 'automated reporting', helpText: 'Name of the feature' },
        { name: 'primary_benefit', type: 'text', defaultValue: 'generate reports automatically on a schedule', helpText: 'Main benefit' },
        { name: 'use_case', type: 'text', defaultValue: 'you need regular insights without manual work', helpText: 'When to use it' },
      ],
      tone: 'Educational',
      complexityBaseline: 5,
      styleNotes: 'Clear, benefit-oriented, practical examples',
      qualityThreshold: 7.0,
      requiredElements: ['Feature description', 'Benefit explanation', 'Use case example'],
      usageCount: 18,
      rating: 4.6,
      lastModified: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'David Martinez',
    },
    {
      id: 'template-5',
      name: 'Healthcare Consultation',
      description: 'Template for medical consultation conversations (training purposes only)',
      category: 'Healthcare',
      structure: 'User: I\'ve been experiencing {{symptoms}}.\nAssistant: I understand you\'re experiencing {{symptoms}}. To better assist you, can you tell me {{diagnostic_question}}? It\'s important to {{medical_advice}}.',
      variables: [
        { name: 'symptoms', type: 'text', defaultValue: 'persistent headaches', helpText: 'Patient symptoms' },
        { name: 'diagnostic_question', type: 'text', defaultValue: 'how long these headaches have been occurring and their severity', helpText: 'Question to diagnose' },
        { name: 'medical_advice', type: 'text', defaultValue: 'consult with a healthcare professional for proper evaluation', helpText: 'Medical guidance' },
      ],
      tone: 'Professional',
      complexityBaseline: 8,
      styleNotes: 'Empathetic, thorough, professional medical language',
      qualityThreshold: 8.0,
      requiredElements: ['Symptom acknowledgment', 'Diagnostic questions', 'Professional advice disclaimer'],
      usageCount: 12,
      rating: 4.9,
      lastModified: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Dr. Emily Roberts',
    },
  ];
  
  return templates;
}

// Generate mock scenarios
export function generateMockScenarios(): Scenario[] {
  const scenarios: Scenario[] = [
    {
      id: 'scenario-1',
      name: 'Password Reset Support',
      description: 'Customer needs help resetting their password',
      parentTemplateId: 'template-1',
      parentTemplateName: 'Customer Support Best Practices',
      context: 'Customer cannot access their account due to forgotten password',
      parameterValues: {
        issue_type: 'password reset',
        resolution_approach: 'sending a secure reset link to your registered email',
      },
      variationCount: 5,
      status: 'active',
      qualityScore: 8.2,
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Sarah Johnson',
      topic: 'Account Recovery',
      persona: 'Frustrated Customer',
      emotionalArc: 'Anxious → Relieved',
      generationStatus: 'generated',
      conversationId: 'conv-1',
    },
    {
      id: 'scenario-2',
      name: 'Account Locked Issue',
      description: 'Customer account is locked due to multiple failed login attempts',
      parentTemplateId: 'template-1',
      parentTemplateName: 'Customer Support Best Practices',
      context: 'Security measure triggered after failed login attempts',
      parameterValues: {
        issue_type: 'locked account',
        resolution_approach: 'verifying your identity and unlocking your account',
      },
      variationCount: 3,
      status: 'active',
      qualityScore: 8.5,
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Sarah Johnson',
      topic: 'Security & Access',
      persona: 'Worried Business User',
      emotionalArc: 'Concerned → Confident',
      generationStatus: 'not_generated',
    },
    {
      id: 'scenario-3',
      name: 'Browser Compatibility Issue',
      description: 'Application not working in specific browser',
      parentTemplateId: 'template-2',
      parentTemplateName: 'Technical Troubleshooting',
      context: 'User experiencing issues with application in older browser version',
      parameterValues: {
        symptom_description: 'The dashboard doesn\'t load properly in Internet Explorer 11',
        diagnostic_step: 'which browser and version you\'re using',
        follow_up_question: 'Are you able to try in Chrome or Firefox?',
      },
      variationCount: 4,
      status: 'active',
      qualityScore: 7.8,
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Michael Chen',
      topic: 'Technical Support',
      persona: 'Non-Technical User',
      emotionalArc: 'Confused → Understanding',
      generationStatus: 'generated',
      conversationId: 'conv-3',
    },
    {
      id: 'scenario-4',
      name: 'API Integration Error',
      description: 'Developer encountering errors when integrating API',
      parentTemplateId: 'template-2',
      parentTemplateName: 'Technical Troubleshooting',
      context: 'Third-party API integration returning authentication errors',
      parameterValues: {
        symptom_description: 'I\'m getting 401 unauthorized errors when calling the API',
        diagnostic_step: 'your API key configuration and request headers',
        follow_up_question: 'Are you including the Authorization header in your requests?',
      },
      variationCount: 6,
      status: 'active',
      qualityScore: 8.7,
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Michael Chen',
      topic: 'Developer Support',
      persona: 'Technical Developer',
      emotionalArc: 'Frustrated → Problem-Solving',
      generationStatus: 'error',
      errorMessage: 'Rate limit exceeded on generation API',
    },
    {
      id: 'scenario-5',
      name: 'Enterprise Pricing Objection',
      description: 'Enterprise client concerned about pricing tier',
      parentTemplateId: 'template-3',
      parentTemplateName: 'Sales Objection Handling',
      context: 'Large enterprise evaluating solution but concerned about cost',
      parameterValues: {
        objection_type: 'enterprise pricing being higher than expected',
        resolution_approach: 'demonstrating the ROI calculation and sharing case studies from similar enterprises',
      },
      variationCount: 5,
      status: 'active',
      qualityScore: 8.0,
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Jessica Williams',
      topic: 'Sales & Pricing',
      persona: 'Budget-Conscious Executive',
      emotionalArc: 'Skeptical → Convinced',
      generationStatus: 'generated',
      conversationId: 'conv-5',
    },
    {
      id: 'scenario-6',
      name: 'Feature Comparison Request',
      description: 'Customer comparing product features with competitors',
      parentTemplateId: 'template-4',
      parentTemplateName: 'Product Feature Explanation',
      context: 'Potential customer evaluating different solutions',
      parameterValues: {
        feature_name: 'real-time collaboration',
        primary_benefit: 'work simultaneously with team members on the same document',
        use_case: 'your team needs to coordinate on projects remotely',
      },
      variationCount: 4,
      status: 'active',
      qualityScore: 7.5,
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'David Martinez',
      topic: 'Product Comparison',
      persona: 'Research-Oriented Buyer',
      emotionalArc: 'Uncertain → Informed',
      generationStatus: 'not_generated',
    },
    {
      id: 'scenario-7',
      name: 'Data Export Request',
      description: 'Customer needs to export their data for migration',
      parentTemplateId: 'template-1',
      parentTemplateName: 'Customer Support Best Practices',
      context: 'Customer planning to migrate to new system or backup data',
      parameterValues: {
        issue_type: 'data export',
        resolution_approach: 'guiding you through our export tools and formats',
      },
      variationCount: 3,
      status: 'active',
      qualityScore: 8.3,
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Sarah Johnson',
      topic: 'Data Management',
      persona: 'Cautious Administrator',
      emotionalArc: 'Worried → Reassured',
      generationStatus: 'generated',
      conversationId: 'conv-7',
    },
    {
      id: 'scenario-8',
      name: 'Performance Issue Investigation',
      description: 'Application running slowly for specific user',
      parentTemplateId: 'template-2',
      parentTemplateName: 'Technical Troubleshooting',
      context: 'User experiencing degraded performance compared to normal',
      parameterValues: {
        symptom_description: 'The app is taking 30+ seconds to load pages',
        diagnostic_step: 'your internet connection speed and browser cache',
        follow_up_question: 'Have you tried clearing your browser cache recently?',
      },
      variationCount: 5,
      status: 'active',
      qualityScore: 7.9,
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Michael Chen',
      topic: 'Performance Troubleshooting',
      persona: 'Impatient Power User',
      emotionalArc: 'Frustrated → Satisfied',
      generationStatus: 'not_generated',
    },
    {
      id: 'scenario-9',
      name: 'Trial Extension Request',
      description: 'Customer asking for more time on trial period',
      parentTemplateId: 'template-3',
      parentTemplateName: 'Sales Objection Handling',
      context: 'Trial period expiring but customer needs more evaluation time',
      parameterValues: {
        objection_type: 'needing more time to evaluate',
        resolution_approach: 'understanding your evaluation needs and finding a suitable timeline',
      },
      variationCount: 2,
      status: 'active',
      qualityScore: 7.2,
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Jessica Williams',
      topic: 'Trial Management',
      persona: 'Busy Decision Maker',
      emotionalArc: 'Pressured → Relieved',
      generationStatus: 'error',
      errorMessage: 'API timeout during generation',
    },
    {
      id: 'scenario-10',
      name: 'Mobile App Sync Issue',
      description: 'Data not syncing between mobile and web versions',
      parentTemplateId: 'template-2',
      parentTemplateName: 'Technical Troubleshooting',
      context: 'User changes on mobile not appearing on web interface',
      parameterValues: {
        symptom_description: 'Changes I make on mobile don\'t show up on the web',
        diagnostic_step: 'your sync settings and internet connectivity',
        follow_up_question: 'Are you seeing any error messages on the mobile app?',
      },
      variationCount: 4,
      status: 'active',
      qualityScore: 8.1,
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Michael Chen',
      topic: 'Cross-Platform Sync',
      persona: 'Mobile-First User',
      emotionalArc: 'Confused → Understanding',
      generationStatus: 'generated',
      conversationId: 'conv-10',
    },
    {
      id: 'scenario-11',
      name: 'Integration Setup Guidance',
      description: 'Customer needs help setting up third-party integration',
      parentTemplateId: 'template-4',
      parentTemplateName: 'Product Feature Explanation',
      context: 'User wants to connect external service to platform',
      parameterValues: {
        feature_name: 'Slack integration',
        primary_benefit: 'receive notifications directly in your Slack channels',
        use_case: 'you want to keep your team updated without leaving Slack',
      },
      variationCount: 3,
      status: 'active',
      qualityScore: 7.7,
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'David Martinez',
      topic: 'Integration Setup',
      persona: 'Team Coordinator',
      emotionalArc: 'Hopeful → Successful',
      generationStatus: 'not_generated',
    },
    {
      id: 'scenario-12',
      name: 'Billing Discrepancy Query',
      description: 'Customer questioning charges on their invoice',
      parentTemplateId: 'template-1',
      parentTemplateName: 'Customer Support Best Practices',
      context: 'Unexpected charges appearing on billing statement',
      parameterValues: {
        issue_type: 'billing discrepancy',
        resolution_approach: 'reviewing your invoice line by line and explaining each charge',
      },
      variationCount: 2,
      status: 'active',
      qualityScore: 8.4,
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Sarah Johnson',
      topic: 'Billing Support',
      persona: 'Detail-Oriented Finance User',
      emotionalArc: 'Upset → Satisfied',
      generationStatus: 'generated',
      conversationId: 'conv-12',
    },
  ];
  
  return scenarios;
}

// Generate mock edge cases
export function generateMockEdgeCases(): EdgeCase[] {
  const edgeCases: EdgeCase[] = [
    {
      id: 'edge-1',
      title: 'Password Reset - Email Not Registered',
      description: 'User requests password reset for email that doesn\'t exist in system',
      parentScenarioId: 'scenario-1',
      parentScenarioName: 'Password Reset Support',
      edgeCaseType: 'error_condition',
      complexity: 6,
      testStatus: 'passed',
      testResults: {
        expectedBehavior: 'System should not reveal whether email exists, send generic message',
        actualBehavior: 'Generic message sent: "If this email is registered, you will receive a reset link"',
        passed: true,
        testDate: new Date().toISOString(),
      },
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Sarah Johnson',
    },
    {
      id: 'edge-2',
      title: 'Password Reset - Expired Token',
      description: 'User clicks password reset link after token has expired',
      parentScenarioId: 'scenario-1',
      parentScenarioName: 'Password Reset Support',
      edgeCaseType: 'boundary_value',
      complexity: 5,
      testStatus: 'passed',
      testResults: {
        expectedBehavior: 'Show clear error and offer to send new reset link',
        actualBehavior: 'Error shown with "Request New Link" button',
        passed: true,
        testDate: new Date().toISOString(),
      },
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Sarah Johnson',
    },
    {
      id: 'edge-3',
      title: 'Account Locked - Maximum Attempts Reached',
      description: 'User has exceeded maximum unlock attempts',
      parentScenarioId: 'scenario-2',
      parentScenarioName: 'Account Locked Issue',
      edgeCaseType: 'boundary_value',
      complexity: 7,
      testStatus: 'passed',
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Sarah Johnson',
    },
    {
      id: 'edge-4',
      title: 'Browser Issue - JavaScript Disabled',
      description: 'User has JavaScript disabled in browser',
      parentScenarioId: 'scenario-3',
      parentScenarioName: 'Browser Compatibility Issue',
      edgeCaseType: 'unusual_input',
      complexity: 8,
      testStatus: 'failed',
      testResults: {
        expectedBehavior: 'Show fallback message asking user to enable JavaScript',
        actualBehavior: 'Page appears blank with no message',
        passed: false,
        testDate: new Date().toISOString(),
      },
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Michael Chen',
    },
    {
      id: 'edge-5',
      title: 'API Error - Rate Limit Exceeded',
      description: 'Developer exceeds API rate limit',
      parentScenarioId: 'scenario-4',
      parentScenarioName: 'API Integration Error',
      edgeCaseType: 'error_condition',
      complexity: 6,
      testStatus: 'passed',
      testResults: {
        expectedBehavior: 'Return 429 status with Retry-After header and clear error message',
        actualBehavior: '429 status returned with retry guidance',
        passed: true,
        testDate: new Date().toISOString(),
      },
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Michael Chen',
    },
    {
      id: 'edge-6',
      title: 'API Error - Malformed Request',
      description: 'Developer sends request with invalid JSON',
      parentScenarioId: 'scenario-4',
      parentScenarioName: 'API Integration Error',
      edgeCaseType: 'unusual_input',
      complexity: 5,
      testStatus: 'passed',
      createdAt: randomDate(new Date(2024, 0, 1), new Date()),
      createdBy: 'Michael Chen',
    },
  ];
  
  return edgeCases;
}

// Generate mock conversations
export function generateMockConversations(): Conversation[] {
  const mockData = [
    { id: 11, title: 'Marcus-Roth-Confusion', persona: 'Mid-career professional', emotion: 'Confusion', tier: 'template' as TierType, created: '09/09/2025', status: 'none' as ConversationStatus },
    { id: 12, title: 'Jennifer-HSA-Overwhelm', persona: 'Young professional', emotion: 'Overwhelm', tier: 'template' as TierType, created: '10/10/2025', status: 'failed' as ConversationStatus },
    { id: 13, title: 'David-Pension-Confusion', persona: 'Near-retirement', emotion: 'Confusion', tier: 'template' as TierType, created: '10/06/2025', status: 'none' as ConversationStatus },
    { id: 14, title: 'Marcus-Backdoor-Confusion', persona: 'High-income professional', emotion: 'Confusion', tier: 'template' as TierType, created: '09/15/2025', status: 'none' as ConversationStatus },
    { id: 15, title: 'Jennifer-Mega-Overwhelm', persona: 'Tech worker', emotion: 'Overwhelm', tier: 'template' as TierType, created: '09/24/2025', status: 'none' as ConversationStatus },
    { id: 16, title: 'Carlos-Self-employment-Confusion', persona: 'New freelancer', emotion: 'Confusion', tier: 'template' as TierType, created: '09/09/2025', status: 'none' as ConversationStatus },
    { id: 17, title: 'Sarah-529-Confusion', persona: 'Parent of young children', emotion: 'Confusion', tier: 'template' as TierType, created: '10/13/2025', status: 'none' as ConversationStatus },
    { id: 18, title: 'Marcus-International-Overwhelm', persona: 'Relocating professional', emotion: 'Overwhelm', tier: 'template' as TierType, created: '09/28/2025', status: 'none' as ConversationStatus },
    { id: 19, title: 'Jennifer-Stock-Confusion', persona: 'Startup employee', emotion: 'Confusion', tier: 'template' as TierType, created: '10/09/2025', status: 'none' as ConversationStatus },
    { id: 20, title: 'David-Required-Confusion', persona: 'Retiree', emotion: 'Confusion', tier: 'template' as TierType, created: '10/04/2025', status: 'failed' as ConversationStatus },
    { id: 21, title: 'Marcus-Career-Shame', persona: 'Career changer', emotion: 'Shame', tier: 'template' as TierType, created: '09/22/2025', status: 'none' as ConversationStatus },
    { id: 22, title: 'Sarah-Bankruptcy-Shame', persona: 'Medical crisis survivor', emotion: 'Shame', tier: 'template' as TierType, created: '09/06/2025', status: 'none' as ConversationStatus },
    { id: 23, title: 'Carlos-Student-Shame', persona: 'Student loan defaulter', emotion: 'Shame', tier: 'template' as TierType, created: '10/15/2025', status: 'none' as ConversationStatus },
    { id: 24, title: 'David-Adult-Shame', persona: 'Parent supporting adult child', emotion: 'Shame', tier: 'template' as TierType, created: '09/10/2025', status: 'none' as ConversationStatus },
    { id: 25, title: 'Jennifer-Credit-Shame', persona: 'Divorced individual', emotion: 'Shame', tier: 'template' as TierType, created: '09/15/2025', status: 'failed' as ConversationStatus },
    { id: 26, title: 'Carlos-Side-Shame', persona: 'Side hustler', emotion: 'Shame', tier: 'template' as TierType, created: '09/13/2025', status: 'none' as ConversationStatus },
    { id: 27, title: 'Jennifer-Inheritance-Shame', persona: 'Inheritance recipient', emotion: 'Shame', tier: 'template' as TierType, created: '10/04/2025', status: 'none' as ConversationStatus },
    { id: 28, title: 'Marcus-Overspending-Shame', persona: 'High earner with spending habit', emotion: 'Shame', tier: 'template' as TierType, created: '09/25/2025', status: 'none' as ConversationStatus },
    { id: 29, title: 'David-Retirement-Conflict', persona: 'Couple age 58/56', emotion: 'Conflict', tier: 'template' as TierType, created: '10/12/2025', status: 'none' as ConversationStatus },
    { id: 30, title: 'Marcus-Risk-Conflict', persona: 'Couple age 42/44', emotion: 'Conflict', tier: 'template' as TierType, created: '10/21/2025', status: 'none' as ConversationStatus },
    { id: 31, title: 'David-Parent-Conflict', persona: 'Couple age 49/51', emotion: 'Conflict', tier: 'template' as TierType, created: '09/30/2025', status: 'failed' as ConversationStatus },
    { id: 32, title: 'Carlos-Home-Conflict', persona: 'Couple age 33/35', emotion: 'Conflict', tier: 'template' as TierType, created: '10/01/2025', status: 'none' as ConversationStatus },
    { id: 33, title: 'Marcus-Private-Conflict', persona: 'Couple age 39/41', emotion: 'Conflict', tier: 'template' as TierType, created: '09/16/2025', status: 'none' as ConversationStatus },
    { id: 34, title: 'Sarah-Career-Conflict', persona: 'Couple age 37/38', emotion: 'Conflict', tier: 'template' as TierType, created: '09/04/2025', status: 'failed' as ConversationStatus },
    { id: 35, title: 'Carlos-Prenup-Conflict', persona: 'Couple age 31/32', emotion: 'Conflict', tier: 'template' as TierType, created: '09/19/2025', status: 'none' as ConversationStatus },
    { id: 36, title: 'Marcus-Vacation-Conflict', persona: 'Couple age 45/46', emotion: 'Conflict', tier: 'template' as TierType, created: '09/28/2025', status: 'none' as ConversationStatus },
    { id: 37, title: 'Marcus-Job-Anxiety', persona: 'Recently laid off', emotion: 'Anxiety', tier: 'template' as TierType, created: '10/16/2025', status: 'none' as ConversationStatus },
    { id: 38, title: 'David-Market-Anxiety', persona: 'Near retiree in downturn', emotion: 'Anxiety', tier: 'template' as TierType, created: '09/20/2025', status: 'none' as ConversationStatus },
    { id: 39, title: 'Jennifer-First-time-Anxiety', persona: 'First-time homebuyer', emotion: 'Anxiety', tier: 'template' as TierType, created: '10/09/2025', status: 'none' as ConversationStatus },
    { id: 40, title: 'Marcus-Small-Anxiety', persona: 'Small business owner', emotion: 'Anxiety', tier: 'template' as TierType, created: '10/14/2025', status: 'none' as ConversationStatus },
    { id: 41, title: 'Sarah-Medical-Anxiety', persona: 'Chronic condition patient', emotion: 'Anxiety', tier: 'template' as TierType, created: '09/20/2025', status: 'failed' as ConversationStatus },
    { id: 42, title: 'Sarah-Child-Anxiety', persona: 'Parent of special needs child', emotion: 'Anxiety', tier: 'template' as TierType, created: '09/19/2025', status: 'none' as ConversationStatus },
    { id: 43, title: 'David-Aging-Anxiety', persona: 'Adult child of aging parents', emotion: 'Anxiety', tier: 'template' as TierType, created: '10/12/2025', status: 'none' as ConversationStatus },
    { id: 44, title: 'Jennifer-Identity-Anxiety', persona: 'Identity theft victim', emotion: 'Anxiety', tier: 'template' as TierType, created: '09/24/2025', status: 'none' as ConversationStatus },
    { id: 45, title: 'David-Parent-Grief', persona: 'Bereaved child', emotion: 'Grief', tier: 'template' as TierType, created: '09/15/2025', status: 'none' as ConversationStatus },
    { id: 46, title: 'Jennifer-Divorce-Grief', persona: 'Divorcee', emotion: 'Grief', tier: 'template' as TierType, created: '10/05/2025', status: 'none' as ConversationStatus },
    { id: 47, title: 'David-Job-Grief', persona: 'Long-tenure employee', emotion: 'Grief', tier: 'template' as TierType, created: '10/13/2025', status: 'none' as ConversationStatus },
    { id: 48, title: 'Jennifer-Miscarriage-Grief', persona: 'Fertility treatment patient', emotion: 'Grief', tier: 'template' as TierType, created: '09/17/2025', status: 'failed' as ConversationStatus },
    { id: 49, title: 'Marcus-Home-Grief', persona: 'Disaster survivor', emotion: 'Grief', tier: 'template' as TierType, created: '09/26/2025', status: 'none' as ConversationStatus },
    { id: 50, title: 'David-Business-Grief', persona: 'Former business owner', emotion: 'Grief', tier: 'template' as TierType, created: '10/07/2025', status: 'none' as ConversationStatus },
    { id: 51, title: 'Maria-Elderly-Obligation', persona: 'Immigrant supporting elderly parents', emotion: 'Obligation + Guilt + Anxiety', tier: 'scenario' as TierType, created: '10/06/2025', status: 'none' as ConversationStatus },
    { id: 52, title: 'Jennifer-Disability-Fear', persona: 'Disabled individual career pivoting', emotion: 'Fear + Determination + Uncertainty', tier: 'scenario' as TierType, created: '09/17/2025', status: 'none' as ConversationStatus },
    { id: 53, title: 'Sarah-Domestic-Fear', persona: 'Domestic abuse survivor', emotion: 'Fear + Shame + Hope', tier: 'scenario' as TierType, created: '10/04/2025', status: 'none' as ConversationStatus },
    { id: 54, title: 'Alex-Transgender-Anxiety', persona: 'Transgender individual', emotion: 'Anxiety + Hope + Vulnerability', tier: 'scenario' as TierType, created: '10/22/2025', status: 'none' as ConversationStatus },
    { id: 55, title: 'Marcus-Wrongful-Anger', persona: 'Wrongful termination settlement recipient', emotion: 'Anger + Vindication + Confusion', tier: 'scenario' as TierType, created: '09/28/2025', status: 'none' as ConversationStatus },
    { id: 56, title: 'Carlos-Crypto-Regret', persona: 'Crypto crash victim', emotion: 'Regret + Shame + Determination', tier: 'scenario' as TierType, created: '10/27/2025', status: 'none' as ConversationStatus },
    { id: 57, title: 'Jennifer-MLM-Shame', persona: 'MLM victim', emotion: 'Shame + Anger + Relief', tier: 'scenario' as TierType, created: '09/24/2025', status: 'none' as ConversationStatus },
    { id: 58, title: 'Sarah-Sandwich-Overwhelm', persona: 'Sandwich generation caregiver', emotion: 'Overwhelm + Guilt + Exhaustion', tier: 'scenario' as TierType, created: '09/11/2025', status: 'none' as ConversationStatus },
    { id: 59, title: 'Raj-Green-Frustration', persona: 'H1B visa holder', emotion: 'Frustration + Fear + Hope', tier: 'scenario' as TierType, created: '09/03/2025', status: 'none' as ConversationStatus },
    { id: 60, title: 'Marcus-Addiction-Shame', persona: 'Recovering addict', emotion: 'Shame + Hope + Determination', tier: 'scenario' as TierType, created: '10/19/2025', status: 'none' as ConversationStatus },
    { id: 61, title: 'Jennifer-Infertility-Grief', persona: 'Fertility treatment patient', emotion: 'Grief + Hope + Anxiety', tier: 'scenario' as TierType, created: '10/06/2025', status: 'none' as ConversationStatus },
    { id: 62, title: 'Marcus-Small-Confusion', persona: 'Small business owner', emotion: 'Confusion + Anxiety', tier: 'scenario' as TierType, created: '10/08/2025', status: 'none' as ConversationStatus },
    { id: 63, title: 'Sarah-Widowed-Grief', persona: 'Young widow', emotion: 'Grief + Fear + Overwhelm', tier: 'scenario' as TierType, created: '10/30/2025', status: 'none' as ConversationStatus },
    { id: 64, title: 'Jennifer-Gender-Anger', persona: 'Female professional', emotion: 'Anger + Determination', tier: 'scenario' as TierType, created: '10/09/2025', status: 'none' as ConversationStatus },
    { id: 65, title: 'Marcus-Religious-Guilt', persona: 'Faith community member', emotion: 'Guilt + Conflict + Determination', tier: 'scenario' as TierType, created: '10/25/2025', status: 'none' as ConversationStatus },
    { id: 66, title: 'Jennifer-Adult-Frustration', persona: 'Adult ADHD individual', emotion: 'Frustration + Hope', tier: 'scenario' as TierType, created: '10/06/2025', status: 'none' as ConversationStatus },
    { id: 67, title: 'Carlos-Gig-Anxiety', persona: 'Gig economy worker', emotion: 'Anxiety + Confusion', tier: 'scenario' as TierType, created: '09/09/2025', status: 'none' as ConversationStatus },
    { id: 68, title: 'Marcus-Interracial-Conflict', persona: 'Interracial couple', emotion: 'Conflict + Frustration + Hope', tier: 'scenario' as TierType, created: '10/15/2025', status: 'none' as ConversationStatus },
    { id: 69, title: 'Jennifer-Climate-Anxiety', persona: 'Climate-conscious investor', emotion: 'Anxiety + Hope + Determination', tier: 'scenario' as TierType, created: '10/07/2025', status: 'none' as ConversationStatus },
    { id: 70, title: 'Sarah-Neurodivergent-Anxiety', persona: 'Parent of autistic child', emotion: 'Anxiety + Love + Overwhelm', tier: 'scenario' as TierType, created: '09/19/2025', status: 'none' as ConversationStatus },
    { id: 71, title: 'David-Boomerang-Frustration', persona: 'Parent of adult child', emotion: 'Frustration + Guilt + Determination', tier: 'scenario' as TierType, created: '10/18/2025', status: 'none' as ConversationStatus },
    { id: 72, title: 'Marcus-Medical-Shame', persona: 'Cancer survivor', emotion: 'Shame + Relief + Determination', tier: 'scenario' as TierType, created: '09/06/2025', status: 'none' as ConversationStatus },
    { id: 73, title: 'Jennifer-Toxic-Anxiety', persona: 'Burned out employee', emotion: 'Anxiety + Trapped + Determination', tier: 'scenario' as TierType, created: '10/27/2025', status: 'none' as ConversationStatus },
    { id: 74, title: 'David-Inheritance-Grief', persona: 'Bereaved sibling', emotion: 'Grief + Anger + Guilt', tier: 'scenario' as TierType, created: '10/06/2025', status: 'none' as ConversationStatus },
    { id: 75, title: 'Marcus-Late-Life-Fear', persona: 'Career changer', emotion: 'Fear + Hope + Determination', tier: 'scenario' as TierType, created: '09/08/2025', status: 'none' as ConversationStatus },
    { id: 76, title: 'Carlos-Algorithmic-Regret', persona: 'Tech-savvy investor', emotion: 'Regret + Confusion + Determination', tier: 'scenario' as TierType, created: '09/25/2025', status: 'none' as ConversationStatus },
    { id: 77, title: 'Raj-Expatriate-Overwhelm', persona: 'Expatriate', emotion: 'Overwhelm + Frustration', tier: 'scenario' as TierType, created: '10/10/2025', status: 'none' as ConversationStatus },
    { id: 78, title: 'Jordan-Polyamorous-Complexity', persona: 'Polyamorous household', emotion: 'Complexity + Hope', tier: 'scenario' as TierType, created: '10/29/2025', status: 'none' as ConversationStatus },
    { id: 79, title: 'Sarah-Unpaid-Anxiety', persona: 'Unpaid caregiver', emotion: 'Anxiety + Resentment + Determination', tier: 'scenario' as TierType, created: '10/09/2025', status: 'none' as ConversationStatus },
    { id: 80, title: 'Carlos-Startup-Disappointment', persona: 'Startup employee', emotion: 'Disappointment + Uncertainty', tier: 'scenario' as TierType, created: '09/03/2025', status: 'none' as ConversationStatus },
    { id: 81, title: 'Marcus-Faith-Grief', persona: 'Former religious community member', emotion: 'Grief + Liberation + Anxiety', tier: 'scenario' as TierType, created: '10/13/2025', status: 'none' as ConversationStatus },
    { id: 82, title: 'Marcus-Whistleblower-Vindication', persona: 'Whistleblower', emotion: 'Vindication + Anxiety + Relief', tier: 'scenario' as TierType, created: '10/23/2025', status: 'none' as ConversationStatus },
    { id: 83, title: 'Jennifer-Long-Frustration', persona: 'Long COVID patient', emotion: 'Frustration + Fear + Determination', tier: 'scenario' as TierType, created: '09/21/2025', status: 'none' as ConversationStatus },
    { id: 84, title: 'David-Blended-Conflict', persona: 'Blended family parents', emotion: 'Conflict + Love + Complexity', tier: 'scenario' as TierType, created: '10/10/2025', status: 'none' as ConversationStatus },
    { id: 85, title: 'Carlos-Digital-Freedom', persona: 'Digital nomad', emotion: 'Freedom + Anxiety + Confusion', tier: 'scenario' as TierType, created: '09/16/2025', status: 'failed' as ConversationStatus },
    { id: 86, title: 'Marcus-Suicidal-Desperation', persona: 'Suicidal individual', emotion: 'Desperation + Hopelessness', tier: 'edge_case' as TierType, created: '09/26/2025', status: 'none' as ConversationStatus },
    { id: 87, title: 'Sarah-Elder-Concern', persona: 'Elder abuse victim family', emotion: 'Concern + Fear + Anger', tier: 'edge_case' as TierType, created: '10/30/2025', status: 'none' as ConversationStatus },
    { id: 88, title: 'Jennifer-Child-Anger', persona: 'Child custody victim', emotion: 'Anger + Frustration + Fear', tier: 'edge_case' as TierType, created: '10/16/2025', status: 'none' as ConversationStatus },
    { id: 89, title: 'Marcus-Tax-Desperation', persona: 'Tax evader', emotion: 'Desperation + Fear', tier: 'edge_case' as TierType, created: '09/02/2025', status: 'failed' as ConversationStatus },
    { id: 90, title: 'Marcus-Insider-Greed', persona: 'Insider trader', emotion: 'Greed + Fear', tier: 'edge_case' as TierType, created: '10/19/2025', status: 'failed' as ConversationStatus },
    { id: 91, title: 'Carlos-Gambling-Desperation', persona: 'Gambling addict', emotion: 'Desperation + Shame', tier: 'edge_case' as TierType, created: '09/27/2025', status: 'none' as ConversationStatus },
    { id: 92, title: 'Sarah-Domestic-Fear', persona: 'Domestic violence victim', emotion: 'Fear + Trapped + Desperation', tier: 'edge_case' as TierType, created: '10/06/2025', status: 'none' as ConversationStatus },
    { id: 93, title: 'Marcus-Bankruptcy-Desperation', persona: 'Bankruptcy fraudster', emotion: 'Desperation + Guilt', tier: 'edge_case' as TierType, created: '09/23/2025', status: 'none' as ConversationStatus },
    { id: 94, title: 'Carlos-Immigration-Desperation', persona: 'Immigration fraudster', emotion: 'Desperation + Fear', tier: 'edge_case' as TierType, created: '09/11/2025', status: 'none' as ConversationStatus },
    { id: 95, title: 'Jennifer-Medical-Desperation', persona: 'Medical billing fraudster', emotion: 'Desperation + Rationalization', tier: 'edge_case' as TierType, created: '09/15/2025', status: 'none' as ConversationStatus },
    { id: 96, title: 'Marcus-Homeless-Desperation', persona: 'Homeless individual', emotion: 'Desperation + Hopelessness', tier: 'edge_case' as TierType, created: '10/14/2025', status: 'none' as ConversationStatus },
    { id: 97, title: 'Sarah-Severe-Anxiety', persona: 'Hoarding disorder individual', emotion: 'Anxiety + Shame + Overwhelm', tier: 'edge_case' as TierType, created: '10/13/2025', status: 'failed' as ConversationStatus },
    { id: 98, title: 'Carlos-Pyramid-Anger', persona: 'Pyramid scheme victim', emotion: 'Anger + Shame + Desperation', tier: 'edge_case' as TierType, created: '10/18/2025', status: 'failed' as ConversationStatus },
    { id: 99, title: 'Jennifer-Active-Fear', persona: 'Restraining order victim', emotion: 'Fear + Anger + Confusion', tier: 'edge_case' as TierType, created: '10/20/2025', status: 'none' as ConversationStatus },
    { id: 100, title: 'Marcus-Substance-Anxiety', persona: 'Substance abuse relapsing individual', emotion: 'Anxiety + Fear + Desperation', tier: 'edge_case' as TierType, created: '10/09/2025', status: 'none' as ConversationStatus },
  ];

  return mockData.map((data) => {
    const turnCount = Math.floor(Math.random() * 4) + 3;
    const turns = generateTurns(turnCount);
    const totalTokens = turns.reduce((sum, turn) => sum + turn.tokenCount, 0);
    const qualityScore = Math.random() * 4 + 6;
    
    // Parse date from MM/DD/YYYY format
    const [month, day, year] = data.created.split('/');
    const createdDate = new Date(`${year}-${month}-${day}`);
    
    const reviewActions: ReviewAction[] = [
      {
        id: `action-${data.id}-1`,
        action: 'generated',
        performedBy: 'System',
        timestamp: createdDate.toISOString(),
      },
    ];
    
    return {
      id: `conv-${data.id}`,
      title: data.title,
      persona: data.persona,
      emotion: data.emotion,
      tier: data.tier,
      category: ['Financial Planning'],
      status: data.status,
      qualityScore: parseFloat(qualityScore.toFixed(1)),
      qualityMetrics: generateQualityMetrics(qualityScore),
      createdAt: createdDate.toISOString(),
      updatedAt: createdDate.toISOString(),
      createdBy: 'System',
      turns,
      totalTurns: turns.length,
      totalTokens,
      parentId: data.tier === 'scenario' ? 'template-1' : data.tier === 'edge_case' ? 'scenario-1' : undefined,
      parentType: data.tier === 'scenario' ? 'template' : data.tier === 'edge_case' ? 'scenario' : undefined,
      parameters: {
        audience: 'Adult',
        complexity: Math.floor(Math.random() * 10) + 1,
        length: 'Medium',
        style: 'Empathetic',
      },
      reviewHistory: reviewActions,
    };
  });
}

// Generate initial dataset
export function generateInitialMockData() {
  return {
    templates: generateMockTemplates(),
    scenarios: generateMockScenarios(),
    edgeCases: generateMockEdgeCases(),
    conversations: generateMockConversations(),
  };
}
