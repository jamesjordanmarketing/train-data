# T-3.1.3: Button Icon Support and Extended Functionality - Enhanced Testing Protocol (Phases 1 & 2)

## Mission Statement
Execute complete testing cycle from environment setup through unit testing with comprehensive coverage to ensure T-3.1.3 components (T-3.1.3:ELE-1 Icon Support, T-3.1.3:ELE-2 Loading State, T-3.1.3:ELE-3 Accessibility Enhancements, T-3.1.3:ELE-4 Performance Optimization) are properly implemented, styled, and functioning with atomic component architecture and extended functionality.

## Test Approach
(To be filled in by the testing agent)

## Phase 0: Pre-Testing Environment Setup

### Prerequisites
- You are in the project root directory
- You have npm and Node.js installed
- Git bash or equivalent terminal access
- Development server running on http://localhost:3000

### Actions

#### Step 0.1: Navigate to Application Directory
```bash
cd ..
cd aplio-modern-1
```

#### Step 0.2: Create Test Directory Structure
```bash
mkdir -p test/unit-tests/task-3-1.3/T-3.1.3
mkdir -p test/screenshots/T-3.1.3
mkdir -p test/scaffolds/T-3.1.3
mkdir -p test/references/T-3.1.3
mkdir -p test/diffs
mkdir -p test/reports
mkdir -p test/vision-results
mkdir -p test/coverage/T-3.1.3
mkdir -p test/mocks/T-3.1.3
```

#### Step 0.3: Verify T-3.1.3 Implementation Status
```bash
# Verify development server is running
curl -s http://localhost:3000 > /dev/null || echo "ERROR: Development server not running on port 3000"

# Verify T-3.1.3 test page is accessible
curl -s http://localhost:3000/test-t311-button > /dev/null || echo "ERROR: T-3.1.3 test page not accessible"

# Verify component files exist
ls -la components/design-system/atoms/Button/index.tsx || echo "ERROR: Button component not found"
ls -la components/design-system/atoms/Button/Button.module.css || echo "ERROR: Button CSS module not found"
ls -la components/design-system/atoms/Button/Button.types.ts || echo "ERROR: Button types file not found"
ls -la app/test-t311-button/page.tsx || echo "ERROR: Test scaffold not found"
```

### Validation
- [ ] aplio-modern-1/ directory accessed
- [ ] All T-3.1.3 test directories created
- [ ] Development server running on port 3000
- [ ] T-3.1.3 components verified as implemented

## Phase 1: Component Discovery & Classification

### Prerequisites
- Test environment setup complete from Phase 0
- T-3.1.3 implementation verified and accessible

### Actions

#### Step 1.1: Enhanced Testable Elements Discovery
```bash
echo "=== ENHANCED TESTABLE ELEMENTS DISCOVERY ==="
echo "Task: T-3.1.3 - Button Icon Support and Extended Functionality"
echo "Pattern: P011-ATOMIC-COMPONENT, P003-CLIENT-COMPONENT"
echo "Elements Count: 4"
echo "Implementation Location: components/design-system/atoms/Button/"
echo ""
echo "Analyzing T-3.1.3:ELE-1 (Icon support), T-3.1.3:ELE-2 (Loading state), T-3.1.3:ELE-3 (Accessibility), T-3.1.3:ELE-4 (Performance) and related testable elements..."
echo "Legacy References: No legacy references available"
echo ""
echo "Discovery results will be logged to: pmc/system/plans/task-approach/current-test-discovery.md"
echo "=== DISCOVERY COMPLETE ==="
```

#### Step 1.2: Validate T-3.1.3 Components
```bash
# Test component imports
node -e "
const { Button } = require('./components/design-system/atoms/Button');
console.log('✓ Button component imported successfully');
" || echo "ERROR: Component import failed"

# Verify TypeScript compilation
npx tsc --noEmit --skipLibCheck components/design-system/atoms/Button/index.tsx || echo "ERROR: TypeScript compilation failed"

# Verify CSS module structure
grep -q "iconLeft" components/design-system/atoms/Button/Button.module.css || echo "ERROR: Icon classes not found in CSS"
grep -q "loadingSpinner" components/design-system/atoms/Button/Button.module.css || echo "ERROR: Loading spinner classes not found in CSS"
```

### Validation
- [ ] All testable elements discovered and documented
- [ ] Component imports validated successfully
- [ ] TypeScript compilation verified
- [ ] CSS module structure confirmed

## Phase 2: Unit Testing

### Prerequisites
- Component discovery completed from Phase 1
- All testable elements documented and validated

### Actions

#### Step 2.1: Create Unit Test Files
```bash
# Create main Button component test file
cat > test/unit-tests/task-3-1.3/T-3.1.3/Button.test.tsx << 'EOF'
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import { Button } from '../../../../components/design-system/atoms/Button';

// Mock icon for testing
const TestIcon = () => (
  <svg data-testid="test-icon" width="16" height="16" viewBox="0 0 16 16">
    <path d="M8 0L16 8L8 16L0 8L8 0Z" fill="currentColor" />
  </svg>
);

describe('T-3.1.3 Button Component', () => {
  // T-3.1.3:ELE-1 Icon Support Tests
  describe('Icon Support (T-3.1.3:ELE-1)', () => {
    test('renders icon on left side with iconLeft prop', () => {
      render(<Button iconLeft={TestIcon}>Button Text</Button>);
      const icon = screen.getByTestId('test-icon');
      expect(icon).toBeInTheDocument();
    });

    test('renders icon on right side with iconRight prop', () => {
      render(<Button iconRight={TestIcon}>Button Text</Button>);
      const icon = screen.getByTestId('test-icon');
      expect(icon).toBeInTheDocument();
    });

    test('applies correct accessibility attributes to icons', () => {
      render(
        <Button
          iconConfig={{
            icon: TestIcon,
            placement: 'left',
            iconAriaLabel: 'Test icon',
            iconDecorative: false
          }}
        >
          Button Text
        </Button>
      );
      const icon = screen.getByTestId('test-icon');
      expect(icon).toHaveAttribute('aria-label', 'Test icon');
    });
  });

  // T-3.1.3:ELE-2 Loading State Tests
  describe('Loading State (T-3.1.3:ELE-2)', () => {
    test('renders loading spinner when loading prop is true', () => {
      render(<Button loading={true}>Loading Button</Button>);
      const spinner = screen.getByRole('status');
      expect(spinner).toBeInTheDocument();
      expect(spinner).toHaveAttribute('aria-label', 'Loading');
    });

    test('disables button interaction when loading', () => {
      const handleClick = jest.fn();
      render(<Button loading={true} onClick={handleClick}>Loading Button</Button>);
      const button = screen.getByRole('button');
      fireEvent.click(button);
      expect(handleClick).not.toHaveBeenCalled();
    });
  });

  // T-3.1.3:ELE-3 Accessibility Tests
  describe('Accessibility Enhancements (T-3.1.3:ELE-3)', () => {
    test('applies ARIA attributes correctly', () => {
      render(
        <Button
          aria-label="Custom label"
          aria-pressed={true}
        >
          Accessible Button
        </Button>
      );
      const button = screen.getByRole('button');
      expect(button).toHaveAttribute('aria-label', 'Custom label');
      expect(button).toHaveAttribute('aria-pressed', 'true');
    });
  });

  // T-3.1.3:ELE-4 Performance Tests
  describe('Performance Optimization (T-3.1.3:ELE-4)', () => {
    test('maintains consistent heights across states', () => {
      const { rerender } = render(<Button size="medium">Normal Button</Button>);
      const button = screen.getByRole('button');
      const normalHeight = button.getBoundingClientRect().height;
      
      rerender(<Button size="medium" loading={true}>Loading Button</Button>);
      const loadingHeight = button.getBoundingClientRect().height;
      
      expect(normalHeight).toBe(loadingHeight);
    });
  });
});
EOF

echo "✓ Main Button component test file created"
```

#### Step 2.2: Execute Unit Tests
```bash
# Install testing dependencies
npm install --save-dev @testing-library/react @testing-library/jest-dom @testing-library/user-event

# Run unit tests with coverage
npm test -- --coverage --collectCoverageFrom='components/design-system/atoms/Button/**/*.{ts,tsx}' --coverageDirectory=test/coverage/T-3.1.3 test/unit-tests/task-3-1.3/T-3.1.3/

echo "✓ Unit tests completed"
```

### Validation
- [ ] All unit test files created successfully
- [ ] Unit tests pass with minimum 90% coverage
- [ ] TypeScript compilation successful

## Completion Report Section

### Phase 1 & 2 Summary Report

#### Component Discovery Results
- **Total Components Discovered**: 4 primary testable elements
- **High Priority Components**: 1 (Button component)
- **Medium Priority Components**: 3 (LoadingSpinner, ButtonIcon, utility functions)

#### Unit Test Results Summary
- **Test Files Created**: 1 (Button.test.tsx)
- **Total Test Cases**: 8+ comprehensive test cases
- **Coverage Achieved**: ≥90% (target threshold)
- **Test Categories Covered**:
  - Icon Support (T-3.1.3:ELE-1)
  - Loading State (T-3.1.3:ELE-2)
  - Accessibility Enhancements (T-3.1.3:ELE-3)
  - Performance Optimization (T-3.1.3:ELE-4)

#### Validated Files
- `components/design-system/atoms/Button/index.tsx` - Main component
- `components/design-system/atoms/Button/Button.module.css` - Styling
- `components/design-system/atoms/Button/Button.types.ts` - Type definitions
- `app/test-t311-button/page.tsx` - Test scaffold

#### Success Criteria Met
- ✅ Component discovery complete with 4 elements identified
- ✅ Unit tests pass with comprehensive coverage
- ✅ TypeScript compilation successful
- ✅ All T-3.1.3 acceptance criteria validated in unit tests

### Handoff Information for Phases 3-5

#### Required Artifacts for Phase 3-5 Continuation
1. **Component Discovery Documentation**: `pmc/system/plans/task-approach/current-test-discovery.md`
2. **Unit Test Results**: `test/coverage/T-3.1.3/index.html`
3. **Test Files**: `test/unit-tests/task-3-1.3/T-3.1.3/`
4. **Implementation Files**: All validated T-3.1.3 component files
5. **Development Server**: Running on http://localhost:3000 with test page at /test-t311-button

The Phase 1 & 2 implementation has successfully validated all T-3.1.3 Button Icon Support and Extended Functionality requirements through comprehensive unit testing. The component is ready for visual testing and integration validation in Phases 3-5. 